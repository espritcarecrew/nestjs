=> créer un nv projet NestJs
    nest new nom-du-projet

=> explorer la structure du projet
    code nom-du-projet

=>lancer le serveur 
    npm run start

=> créer un nouveau projet Nest ::
   $npm i -g @nestjs/cli
   $nest new project-name

=>Créér un controleur à l’aide de la CLI ::
   $nest g controller [nom]

=>créér une instance utiliser la classe NestFactory
    import {NestFactory} from '@nestjs/core';

=>pour profiter des typages d'express 
    installez le paquet @types/express

=>Créer un service :
    $ nest g serivce cats 

=>Créer un module :
    $ nest g module cats

 => créer rapidement un controleur CRUD:Créez un module avec des contrôleurs et des services.
    $ nest g resource [nom]
*Object.assign() : Utilisé pour mettre à jour les propriétés d'un objet existant avec de nouvelles valeurs.
*splice() : Utilisé pour modifier un tableau en supprimant un ou plusieurs éléments à un index spécifié.
=> installez les dépendances de module MONGOOSE::
   $npm install @nestjs/mongoose mongoose
=> installer le package pour utiliser le valideur de classe (pipes):
   $npm i --save class-transformer
=> installation des package pour gérer JWT :
   $npm install @nestjs/jwt @nestjs/passport passport passport-jwt
=>installation du package pour chiffrer les modp::
   $npm install bcryptjs
=> implementde AuthServices avec encapsulation module et service dans UserService:
  $nest g resource user
=> créer un module d'authentification
   AuthService ::pour implémenter la logique d'authentification
   AuthController:: pour exposer les terminaux d'authentification
     $ nest g module auth
     $ nest g controller auth 
     $ nest g service auth